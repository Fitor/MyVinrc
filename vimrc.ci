" vimrc.ci
" An vimrc file created by Chen Ci.
"
" Maintainer:   Chen Ci <chen2033@live.com>
"
" Create Time:  Thu, 23 Mar 2017 01:51:43 +0800
" Change Log:   Create this file.  Thu, 23 Mar 2017 01:53:22 +0800
"
" To use this file, create a hard link to it.
" ln vimrc.ci .vimrc
"   or
" ln vimrc.ci .vim/vimrc

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

let g:vimhome = expand($HOME . '/.vim')
let g:cvimrc = expand('<sfile>:p:h')

" mapleader
let mapleader = ';'

" cvim
if isdirectory(g:cvimrc . '/cvim')
    exec 'set rtp+=' . fnameescape(g:cvimrc . '/cvim')
endif
call cvim#init()

" Vundle
if isdirectory(g:vimhome . '/bundle/Vundle.vim')
    filetype off
    exec 'set rtp+=' . fnameescape(g:vimhome . '/bundle/Vundle.vim')
    call vundle#begin()
    Plugin 'VundleVim/Vundle.vim'
    if filereadable(g:cvimrc.'/Vundle_config.vim')
        exec 'source ' . fnameescape(g:cvimrc . '/Vundle_config.vim')
    endif
    call vundle#end()
endif
let bundles = g:vundle#bundles

" load plugin configure files
for b in bundles
    if b.name == 'Vundle.vim'
        continue
    endif

    let f = g:cvimrc . '/' . substitute(b.name, '.vim', '', '') . '_config.vim'
    if filereadable(f)
        exec 'source ' . fnameescape(f)
    endif
endfor

" map
if filereadable(g:cvimrc . '/map.vim')
    exec 'source ' . fnameescape(g:cvimrc . '/map.vim')
endif

" syntax
if filereadable(g:cvimrc . '/syntax.vim')
    exec 'source ' . fnameescape(g:cvimrc . '/syntax.vim')
endif

" cscope
if filereadable(g:cvimrc . '/cscope_config.vim')
    exec 'source '. fnameescape(g:cvimrc . '/cscope_config.vim')
endif

" quickfix
if filereadable(g:cvimrc . '/quickfix_config.vim')
    exec 'source ' . fnameescape(g:cvimrc . '/quickfix_config.vim')
endif

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
\ if line("'\"") >= 1 && line("'\"") <= line("$") |
\   exe "normal! g`\"" |
\ endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

filetype plugin indent on      " Automatically detect file types.

setlocal noswapfile
" set nobackup   " do not keep a backup file, use versions instead
set backup     " keep a backup file (restore to previoius version)
" set undofile  " keep an undo file (undo changes after closing)

set history=50  " keep 50 lines of command line history
set ruler       " show the cursor position all the time
set showcmd     " display incomplete commands
set incsearch   " do incremental searching
set ignorecase
set number
set relativenumber
set numberwidth=5
set cursorline
set cursorcolumn
set foldenable
set foldmethod=manual
" set foldcolumn=4
set cmdheight=2

" apearance configure
colorscheme molokai
set t_Co=256

set tabstop=4	" Number of spaces that a <Tab> in the file counts for.
set expandtab   " In Insert mode: Use the appropriate number of spaces to insert a <Tab>.
set shiftwidth=4    " Number of spaces to use for each step of (auto)indent.
" set softtabstop=4   " Number of spaces that a <Tab> counts for while performing editing operations, like inserting a <Tab> or using <BS>.
set autoindent      " Copy indent from current line when starting a new line.
set cindent " Enables automatic C program indenting.

set bufhidden=hide
set linespace=0
set scrolloff=3

set showtabline=2 " always show the tabline

set matchtime=1" Highlight current line

" get the root right to write
cmap w!! w !sudo tee > /dev/null %

hi Normal ctermfg=252 ctermbg=none

" Highlight current line
"au Winleave * set nocursorline nocursorcolumn
"au WinEnter * set cursorline nocursorcolumn

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" set file encoding
set fileencodings=utf-8,gbk,ucs-bom,gb18030,gb2312,cp936
set enc=utf-8

